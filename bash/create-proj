#!/bin/bash

# Creates a new project folder
#   writes a Generic Makefike\$
#   makes an src, inc, lib, and bin directories
#   writes a generic main.cpp (or .c) under the src dorectory

SCRIPT_PATH=$(dirname "${BASH_SOURCE[0]}")

HELP_MESSAGE="Create a c/c++ project skeleton including
     - generic Makefile
     - src, bin, inc, and lib folders
     - main.c/cpp file with a basic main function (cpp by default)
               
     create-proj [PROJECT NAME] [-OPTIONS...]
                 
     OPTIONS
        -h    To display this message
        -d    Followed by a directory to specify a directory to
                create the project under. If left unspecified, the
                default is the current directory 
        -c    Creates a C specific project. The default is C++
                note that C++ project Makefile is compatible with
                C files
        -cpp  Creates a C++ project. Note that the C++ makefile is
                compatible with c files
        -j    Creates a Java project. The defualt is C++
"

# Display help message
if [ "$1" == -h ] || [ "$1" == --h ] || [ "$1" == -help ] || [ "$1" == --help ]; then
  printf "$HELP_MESSAGE"
  exit 1
fi
  
# Variable declarations 
PROJ_NAME="$1"
PROJ_DIR=.
Cplusplus=yes

# Input Validation
# TODO: check to make sure the name is a valid possilble file name.
if [ $# -eq 0 ]; then
    echo "No project name specified."
    exit 1
fi

C_MAKEFILE=resources/c-makefile
MAIN_C="
#include <stdio.h>
#include <stdlib.h>

int main(void) {
  pritnf(\"HELLO WORlD!!!\");
  return 0;
}
"

CPP_MAKEFILE=resources/cpp-makefile
MAIN_CPP="
#include <iostream>
#include <stdlib.h>

int main(void) {
  std::cout << \"HELLO WORLD\" << std::endl;
  return 0;
}
"

JAVA_MAKEFILE=resources/java-makefile
MAIN_JAVA="

public class Main {

    public static void main(String[] args) {
        System.out.println(\"HELLO WORLD!!!\");
    }
}
"

# Java project settings
# TODO: finish java makefile and class files.

# TODO: fix this code so you can set flags in any order. I don't think that is possible right now.
# Specify a directory to create the project under
if [ "$2" == -d ]; then
    PROJ_DIR=$3
elif [ "$3" == -d ]; then
    PROJ_DIR=$4
fi

if [ "$2" == -c ]; then
    Cplusplus=no
elif [ "$3" == -c ]; then
    Cplusplus=no
fi

# TODO: Add -j option for java project

# Create folders for project
mkdir $PROJ_DIR/$PROJ_NAME $PROJ_DIR/$PROJ_NAME/src $PROJ_DIR/$PROJ_NAME/bin $PROJ_DIR/$PROJ_NAME/lib $PROJ_DIR/$PROJ_NAME/inc

# Create and write Makefile and main.cpp
# TODO: add makefile support for Java projects
if [ "$Cplusplus" == yes ]; then
    cp $SCRIPT_PATH/$CPP_MAKEFILE $PROJ_DIR/$PROJ_NAME/Makefile
    printf "$MAIN_CPP" >> $PROJ_DIR/$PROJ_NAME/src/main.cpp
else
    cp $SCRIPT_PATH/$C_MAKEFILE $PROJ_DIR/$PROJ_NAME/Makefile
    printf "$MAIN_C" >> $PROJ_DIR/$PROJ_NAME/src/main.c
fi 
